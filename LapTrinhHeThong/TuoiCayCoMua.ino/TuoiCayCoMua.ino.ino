/******************************************************
 * ESP32 Smart Irrigation + MQTT (HiveMQ)
 * Counting Semaphore + Mutex (FreeRTOS)
 * - publishSem (Counting) gom nhi·ªÅu t√≠n hi·ªáu -> publish 1 l·∫ßn
 * - dataMutex (Mutex) b·∫£o v·ªá d·ªØ li·ªáu d√πng chung
 * T√≠ch h·ª£p water sensor ƒë·ªè l√†m c·∫£m bi·∫øn M∆ØA (analog) v√† xu·∫•t chung 1 d√≤ng
 ******************************************************/

#include <WiFi.h>
#include <PubSubClient.h>
#include <WiFiClientSecure.h>
#include <DHT.h>

// FreeRTOS headers (ƒë·ªÉ d√πng semaphore/mutex r√µ r√†ng)
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"

/* ================== WiFi ================== */
// Thay b·∫±ng WiFi c·ªßa b·∫°n
const char* ssid     = "C·ª•c n·ª£ l√πn";
const char* password = "22052004";

/* ================== HiveMQ Cloud ================== */
// Th√¥ng s·ªë MQTT (HiveMQ Cloud)
const char* mqtt_broker   = "b75315a3408e471b9a0617e5da3214a0.s1.eu.hivemq.cloud";
const int   mqtt_port     = 8883;
const char* mqtt_username = "VuDuyHoang";
const char* mqtt_password = "Hoang2703@";

/* Topics */
const char* TOPIC_TELE   = "esp32/telemetry";   // JSON telemetry (d√πng cho Node-RED)
const char* TOPIC_STATE  = "esp32/state";       // tr·∫°ng th√°i t√≥m t·∫Øt
const char* TOPIC_ALERT  = "esp32/alert";
const char* TOPIC_CMD    = "esp32/cmd";
const char* TOPIC_PRETTY = "esp32/test";        // chu·ªói "ƒë·∫πp"

/* ================== Pin & Sensors ================== */
// Ch√¢n ph·∫ßn c·ª©ng b·∫°n ƒëang d√πng
#define DHTPIN 27
#define DHTTYPE DHT22
#define SOIL_PIN 34
#define LDR_PIN  35
#define WATER_TANK_PIN 32   // digital input (module m·ª©c n∆∞·ªõc) -- n·∫øu module l√† analog th√¨ ƒë·ªïi x·ª≠ l√Ω
#define RELAY_PIN 23
#define LED_PUMP 2
#define RAIN_PIN 33         // water sensor ƒë·ªè => ƒë·ªçc analog tr√™n ESP32

/* Buttons (n√∫t nh·∫•n, INPUT_PULLUP) */
#define BTN_MODE   5        // ƒë·ªïi ch·∫ø ƒë·ªô Auto/Manual
#define BTN_MANUAL 17       // b·∫≠t/t·∫Øt b∆°m khi ƒëang Manual

DHT dht(DHTPIN, DHTTYPE);

/* ================== Shared State ================== */
// ƒê·∫∑t volatile v√¨ ƒë∆∞·ª£c truy c·∫≠p t·ª´ nhi·ªÅu task
volatile int   soilValue = 0;        // % ƒë·∫•t (0..100)
volatile int   lightValue = 0;       // % √°nh s√°ng (0..100)
volatile bool  tankHasWater = true;  // b·ªìn c√≥ n∆∞·ªõc?
volatile bool  isRaining = false;    // m∆∞a?
volatile int   rainRawValue = 0;     // raw ADC 0..4095 (ƒë·ªÉ publish/convert %)
volatile float temp = NAN;           // nhi·ªát ƒë·ªô C
volatile float hum  = NAN;           // ƒë·ªô ·∫©m%

/* C·ªù ch·∫ø ƒë·ªô ƒëi·ªÅu khi·ªÉn (ƒë·ªçc/ghi t·ª´ nhi·ªÅu task) */
bool manualMode = false;
bool pumpManualState = false;

/* Th·ªùi gian t∆∞·ªõi & delay */
const unsigned long SOIL_ABSORB_DELAY = 10000;  // ch·ªù ƒë·∫•t th·∫•m sau 1 chu k·ª≥ t∆∞·ªõi (ms)
const unsigned long WATER_TIME_HIGH   = 20000;  // t∆∞·ªõi m·ª©c cao
const unsigned long WATER_TIME_MEDIUM = 15000;  // t∆∞·ªõi m·ª©c trung b√¨nh
const unsigned long WATER_TIME_LOW    = 10000;  // t∆∞·ªõi m·ª©c th·∫•p

/* Tr·∫°ng th√°i logic b∆°m/t∆∞·ªõi */
enum WaterLevel { NO_WATER_TO_STOP, WAIT_SOIL_ABSORB, WATER_OFF, WATER_ON };
enum IrrigationLevel { IRRIGATION_NONE, IRRIGATION_LOW, IRRIGATION_MEDIUM, IRRIGATION_HIGH };

WaterLevel waterLevel = WATER_OFF;    // tr·∫°ng th√°i b∆°m hi·ªán t·∫°i
unsigned long lastPumpOffTime = 0;    // m·ªëc th·ªùi gian t·∫Øt b∆°m (ƒë·ªÉ ch·ªù th·∫•m)
bool pumpActive = false;              // b∆°m ƒëang ch·∫°y theo AUTO?
unsigned long pumpEndTime = 0;        // m·ªëc th·ªùi gian s·∫Ω t·∫Øt b∆°m

/* ================== FreeRTOS Sync ================== */
/**
 * dataMutex  : MUTEX b·∫£o v·ªá nh√≥m bi·∫øn sensor/shared state khi ƒë·ªçc/ghi
 * publishSem : COUNTING SEMAPHORE d√πng l√†m "ƒëi·ªÉm h·∫πn" publish
 *             - M·ªói l·∫ßn c√≥ s·ª± ki·ªán (c·∫£m bi·∫øn m·ªõi, ƒë·ªïi tr·∫°ng th√°i, l·ªánh MQTT, timer) ‚Üí xSemaphoreGive(publishSem)
 *             - mqttTask ƒë·ª£i xSemaphoreTake(publishSem) ‚Üí gom t√≠n hi·ªáu (drain) ‚Üí publish 1 l·∫ßn
 */
SemaphoreHandle_t dataMutex;
SemaphoreHandle_t publishSem;

#define PUB_SEM_MAX     20       // s·ªë l∆∞·ª£ng t√≠n hi·ªáu t·ªëi ƒëa h√†ng ƒë·ª£i
#define TELE_PERIOD_MS  15000    // chu k·ª≥ g·ª≠i telemetry

/* ================== Alert (anti-spam) ================== */
// C·ªù ƒë·ªÉ kh√¥ng spam alert l·∫∑p l·∫°i
bool prevTankEmpty = false;
bool prevSoilDry   = false;
bool prevHighTemp  = false;

/* Ng∆∞·ª°ng c·∫£nh b√°o / m∆∞a */
const int   SOIL_DRY_THRESH      = 15;   // ·∫©m ƒë·∫•t <= 15% coi nh∆∞ "ƒë·∫•t kh√¥"
const float HIGH_TEMP_THRESH     = 35;   // nhi·ªát ƒë·ªô >= 35*C coi nh∆∞ "nhi·ªát cao"
const int   RAIN_ADC_THRESHOLD   = 2500; // 0..4095 (>=ng∆∞·ª°ng => M∆ØA) S·ª¨A THEO TH·ª∞C T·∫æ
const int   TANK_DIGITAL_ACTIVE  = HIGH; // n·∫øu module b√°o HIGH khi c√≥ n∆∞·ªõc; s·ª≠a n·∫øu ng∆∞·ª£c

/* MQTT client TLS */
WiFiClientSecure espClient;
PubSubClient client(espClient);

/* ================== WiFi ================== */
void setup_wifi() {
  Serial.println();
  Serial.printf("üîå K·∫øt n·ªëi WiFi: %s\n", ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(400);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ ƒê√£ k·∫øt n·ªëi WiFi");
  Serial.print("üì° IP: ");
  Serial.println(WiFi.localIP());
}

/* ================== MQTT ================== */
// ƒê·∫£m b·∫£o ƒë√£ k·∫øt n·ªëi t·ªõi broker, n·∫øu ch∆∞a th√¨ k·∫øt n·ªëi l·∫°i
void mqttEnsureConnected() {
  while (!client.connected()) {
    Serial.print("üîÑ K·∫øt n·ªëi MQTT...");
    if (client.connect("ESP32Client", mqtt_username, mqtt_password)) {
      Serial.println("OK");
      client.subscribe(TOPIC_CMD);
      Serial.printf("üì• Subscribed to %s\n", TOPIC_CMD);
    } else {
      Serial.print("‚ùå L·ªói MQTT, state=");
      Serial.println(client.state());
      vTaskDelay(pdMS_TO_TICKS(2000));
    }
  }
}

/* Callback khi c√≥ message ƒë·∫øn TOPIC_CMD */
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) msg += (char)payload[i];
  msg.trim();
  Serial.printf("üì© L·ªánh [%s]: %s\n", topic, msg.c_str());

  if (msg.equalsIgnoreCase("MODE:AUTO")) {
    manualMode = false;
    Serial.println("‚öôÔ∏è Ch·∫ø ƒë·ªô: T·ª∞ ƒê·ªòNG");
  } else if (msg.equalsIgnoreCase("MODE:MANUAL")) {
    manualMode = true;
    Serial.println("‚öôÔ∏è Ch·∫ø ƒë·ªô: TH·ª¶ C√îNG");
  } else if (msg.equalsIgnoreCase("PUMP:ON")) {
    pumpManualState = true;
    Serial.println("üü¢ B∆°m b·∫≠t (t·ª´ app)");
  } else if (msg.equalsIgnoreCase("PUMP:OFF")) {
    pumpManualState = false;
    Serial.println("üî¥ B∆°m t·∫Øt (t·ª´ app)");
  } else {
    Serial.println("‚ö†Ô∏è L·ªánh kh√¥ng h·ª£p l·ªá");
    return;
  }
  xSemaphoreGive(publishSem); // b√°o publish v√¨ tr·∫°ng th√°i thay ƒë·ªïi
}

/* ================== Buttons ================== */
// H√†m qu√©t n√∫t c√≥ ch·ªëng d·ªôi
void checkButtons() {
  static int modeStable = HIGH, manualStable = HIGH;
  static int modeLastReading = HIGH, manualLastReading = HIGH;
  static unsigned long lastDebounceMode = 0, lastDebounceManual = 0;
  const unsigned long debounceDelay = 50;

  int modeReading = digitalRead(BTN_MODE);
  int manualReading = digitalRead(BTN_MANUAL);

  // Ch·ªëng d·ªôi cho n√∫t MODE
  if (modeReading != modeLastReading) {
    lastDebounceMode = millis();
    modeLastReading = modeReading;
  }
  if ((millis() - lastDebounceMode) > debounceDelay) {
    if (modeStable != modeReading) {
      modeStable = modeReading;
      if (modeStable == HIGH) {
        manualMode = !manualMode;
        Serial.println(manualMode ? "‚öôÔ∏è ƒê√£ chuy·ªÉn sang TH·ª¶ C√îNG" : "‚öôÔ∏è ƒê√£ chuy·ªÉn sang T·ª∞ ƒê·ªòNG");
        xSemaphoreGive(publishSem);
      }
    }
  }

  // Ch·ªëng d·ªôi cho n√∫t MANUAL (ch·ªâ khi ƒëang MANUAL)
  if (manualReading != manualLastReading) {
    lastDebounceManual = millis();
    manualLastReading = manualReading;
  }
  if ((millis() - lastDebounceManual) > debounceDelay) {
    if (manualStable != manualReading) {
      manualStable = manualReading;
      if (manualStable == HIGH && manualMode) {
        pumpManualState = !pumpManualState;
        Serial.println(pumpManualState ? "üü¢ B∆°m b·∫≠t (n√∫t nh·∫•n)" : "üî¥ B∆°m t·∫Øt (n√∫t nh·∫•n)");
        xSemaphoreGive(publishSem);
      }
    }
  }
}

// Task qu√©t n√∫t b·∫•m ƒë·ªãnh k·ª≥
void buttonTask(void *pv) {
  while (1) {
    checkButtons();
    vTaskDelay(pdMS_TO_TICKS(20));
  }
}

/* ================== Helpers ================== */
// Helper publish an to√†n (log n·∫øu payload qu√° l·ªõn)
bool safePublish(const char* topic, const char* payload) {
  bool ok = client.publish(topic, payload);
  if (!ok) {
    Serial.printf("‚ö†Ô∏è publish th·∫•t b·∫°i (c√≥ th·ªÉ do payload qu√° l·ªõn). topic=%s, len=%d\n",
                  topic, (int)strlen(payload));
  }
  return ok;
}

// B·∫≠t/t·∫Øt b∆°m + LED
void setPumpState(bool on) {
  digitalWrite(RELAY_PIN, on ? HIGH : LOW);
  digitalWrite(LED_PUMP,  on ? HIGH : LOW);
}

/* T√≠nh m·ª©c t∆∞·ªõi d·ª±a theo c√°c ƒëi·ªÉm s·ªë */
enum IrrigationLevel calculateIrrigationLevel(int soil, int light, float t, float h) {
  int soilScore = 0, tempScore = 0, humScore = 0, lightScore = 0;

  if (soil < 20) soilScore = 40;
  else if (soil < 40) soilScore = 25;
  else if (soil < 60) soilScore = 10;

  if (t > 30) tempScore = 30;
  else if (t > 27) tempScore = 20;
  else if (t > 24) tempScore = 10;

  if (h < 40) humScore = 20;
  else if (h < 60) humScore = 10;

  if (light > 70) lightScore = 15;
  else if (light > 40) lightScore = 7;

  int total = soilScore + tempScore + humScore + lightScore;
  Serial.printf("üìä ƒêi·ªÉm t∆∞·ªõi=%d (ƒë·∫•t:%d,nhi·ªát:%d,·∫©m:%d,√°nh s√°ng:%d)\n",
                total, soilScore, tempScore, humScore, lightScore);

  if (total >= 70) return IRRIGATION_HIGH;
  else if (total >= 40) return IRRIGATION_MEDIUM;
  else if (total >= 20) return IRRIGATION_LOW;
  else return IRRIGATION_NONE;
}

/* ================== Tasks ================== */
// Task ƒë·ªçc c·∫£m bi·∫øn ƒë·ªãnh k·ª≥
void readSensorsTask(void *pv) {
  vTaskDelay(pdMS_TO_TICKS(2000));
  while (1) {
    // ƒê·ªçc ·∫©m ƒë·∫•t (map v·ªÅ %)
    int soil = map(analogRead(SOIL_PIN), 0, 4095, 100, 0);
    soil = constrain(soil, 0, 100);

    // ƒê·ªçc √°nh s√°ng (map v·ªÅ %)
    int light = map(analogRead(LDR_PIN), 0, 4095, 100, 0);
    light = constrain(light, 0, 100);

    // tank module digital: HIGH= c√≤n n∆∞·ªõc (tu·ª≥ module)
    bool tank = (digitalRead(WATER_TANK_PIN) == TANK_DIGITAL_ACTIVE);

    // DHT22
    float t = dht.readTemperature();
    float h = dht.readHumidity();

    // rain sensor (analog)
    int rainRaw = analogRead(RAIN_PIN);
    bool raining = (rainRaw >= RAIN_ADC_THRESHOLD);
    Serial.printf("üåß L∆∞·ª£ng m∆∞a : %d -> %s | ƒê·∫•t : %d | Th√πng n∆∞·ªõc : %s\n",
                  rainRaw, raining ? "M∆∞a" : "Kh√¥ng m∆∞a", soil, tank ? "ƒê·∫ßy" : "H·∫øt");

    // Ghi v√†o bi·∫øn d√πng chung ‚Üí c·∫ßn kh√≥a mutex
    if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(50)) == pdTRUE) {
      soilValue     = soil;
      lightValue    = light;
      tankHasWater  = tank;
      isRaining     = raining;
      rainRawValue  = rainRaw;
      if (!isnan(t)) temp = t;
      if (!isnan(h)) hum  = h;
      xSemaphoreGive(dataMutex);
    }

    /* ===== C·∫£nh b√°o ch·ªëng spam (ch·ªâ b·∫Øn khi chuy·ªÉn tr·∫°ng th√°i) ===== */
    bool tankEmptyNow = !tank;
    bool soilDryNow   = (soil <= SOIL_DRY_THRESH);
    bool highTempNow  = (!isnan(t) && t >= HIGH_TEMP_THRESH);

    if (tankEmptyNow && !prevTankEmpty) {
      safePublish(TOPIC_ALERT, "{\"canhbao\":\"H·∫øt n∆∞·ªõc trong b·ªÉ\"}");
      Serial.println("üö± C·∫¢NH B√ÅO: B·ªÉ h·∫øt n∆∞·ªõc");
      prevTankEmpty = true;
      xSemaphoreGive(publishSem);
    } else if (!tankEmptyNow && prevTankEmpty) prevTankEmpty = false;

    if (soilDryNow && !prevSoilDry) {
      safePublish(TOPIC_ALERT, "{\"canhbao\":\"ƒê·∫•t kh√¥\"}");
      Serial.println("üå± C·∫¢NH B√ÅO: ƒê·∫•t kh√¥");
      prevSoilDry = true;
      xSemaphoreGive(publishSem);
    } else if (!soilDryNow && prevSoilDry) prevSoilDry = false;

    if (highTempNow && !prevHighTemp) {
      safePublish(TOPIC_ALERT, "{\"canhbao\":\"Nhi·ªát ƒë·ªô cao\"}");
      Serial.println("üî• C·∫¢NH B√ÅO: Nhi·ªát ƒë·ªô cao");
      prevHighTemp = true;
      xSemaphoreGive(publishSem);
    } else if (!highTempNow && prevHighTemp) prevHighTemp = false;

    // Lu√¥n b√°o c√≥ d·ªØ li·ªáu m·ªõi (cho ph√©p coalesce ·ªü mqttTask)
    xSemaphoreGive(publishSem);
    vTaskDelay(pdMS_TO_TICKS(7000));
  }
}

// pumpControlTask: t·∫Øt b∆°m khi m∆∞a (isRaining)
void pumpControlTask(void *pv) {
  Serial.println("‚è≥ Kh·ªüi ƒë·ªông ƒëi·ªÅu khi·ªÉn b∆°m (ch·ªù 5s)...");
  vTaskDelay(pdMS_TO_TICKS(5000));

  while (1) {
    // L·∫•y snapshot d·ªØ li·ªáu (kh√≥a trong th·ªùi gian ng·∫Øn)
    int s; int l; bool tank; float t; float h; bool raining;
    if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(20)) == pdTRUE) {
      s = soilValue; l = lightValue; tank = tankHasWater; t = temp; h = hum; raining = isRaining;
      xSemaphoreGive(dataMutex);
    }

    // N·∫øu ƒëang MANUAL ‚Üí b∆°m theo ng∆∞·ªùi d√πng, kh√¥ng can thi·ªáp logic AUTO
    if (manualMode) {
      setPumpState(pumpManualState);
      vTaskDelay(pdMS_TO_TICKS(150));
      continue;
    }

    // N·∫øu h·∫øt n∆∞·ªõc trong b·ªìn ‚Üí t·∫Øt b∆°m, ch·ªù c√≥ n∆∞·ªõc
    if (!tank) {
      setPumpState(false);
      pumpActive = false;
      waterLevel = NO_WATER_TO_STOP;
      vTaskDelay(pdMS_TO_TICKS(300));
      continue;
    }

    // N·∫øu m∆∞a ‚Üí t·∫Øt b∆°m ngay
    if (raining) {
      setPumpState(false);
      pumpActive = false;
      waterLevel = WATER_OFF;
      Serial.println("üåß Tr·ªùi m∆∞a - Ng·ª´ng t∆∞·ªõi");
      vTaskDelay(pdMS_TO_TICKS(500));
      continue;
    }

    // N·∫øu b∆°m ƒëang ch·∫°y ‚Üí ki·ªÉm tra h·∫øt th·ªùi gian ch∆∞a
    if (pumpActive) {
      if (millis() >= pumpEndTime) {
        setPumpState(false);
        pumpActive = false;
        waterLevel = WAIT_SOIL_ABSORB;       // chuy·ªÉn sang ch·ªù ƒë·∫•t th·∫•m
        lastPumpOffTime = millis();
        Serial.println("‚úÖ Ho√†n t·∫•t 1 chu k·ª≥ b∆°m, ch·ªù ƒë·∫•t th·∫•m");
        xSemaphoreGive(publishSem);
      }
      vTaskDelay(pdMS_TO_TICKS(150));
      continue;
    }

    // N·∫øu ƒëang ch·ªù th·∫•m ‚Üí ƒë·ª£i
    if (waterLevel == WAIT_SOIL_ABSORB) {
      if (millis() - lastPumpOffTime >= SOIL_ABSORB_DELAY) waterLevel = WATER_OFF;
      vTaskDelay(pdMS_TO_TICKS(150));
      continue;
    }

    // T√≠nh m·ª©c t∆∞·ªõi
    IrrigationLevel level = calculateIrrigationLevel(s, l, t, h);
    if (level != IRRIGATION_NONE) {
      waterLevel = WATER_ON;
      pumpActive = true;
      switch (level) {
        case IRRIGATION_HIGH:
          pumpEndTime = millis() + WATER_TIME_HIGH; Serial.println("üíß T∆∞·ªõi nhi·ªÅu");
          break;
        case IRRIGATION_MEDIUM:
          pumpEndTime = millis() + WATER_TIME_MEDIUM; Serial.println("üíß T∆∞·ªõi v·ª´a");
          break;
        case IRRIGATION_LOW:
          pumpEndTime = millis() + WATER_TIME_LOW; Serial.println("üíß T∆∞·ªõi √≠t");
          break;
        default: break;
      }
      setPumpState(true);                    // b·∫≠t b∆°m ph·∫ßn c·ª©ng
      xSemaphoreGive(publishSem);            // b√°o publish ngay tr·∫°ng th√°i
    }
    vTaskDelay(pdMS_TO_TICKS(150));
  }
}

/* ================== MQTT Task ================== */
// Task MQTT: x·ª≠ l√Ω k·∫øt n·ªëi + publish khi c√≥ t√≠n hi·ªáu
void mqttTask(void *pv) {
  const TickType_t TELE_PERIOD = pdMS_TO_TICKS(TELE_PERIOD_MS);
  TickType_t lastTele = xTaskGetTickCount();

  for (;;) {
    mqttEnsureConnected();
    client.loop();

    // ƒê·∫øn chu k·ª≥ telemetry ‚Üí b·∫Øn t√≠n hi·ªáu publish
    if (xTaskGetTickCount() - lastTele >= TELE_PERIOD) {
      xSemaphoreGive(publishSem);
      lastTele = xTaskGetTickCount();
    }

    // Ch·ªù t√≠n hi·ªáu publish (Counting Semaphore)
    if (xSemaphoreTake(publishSem, pdMS_TO_TICKS(200)) == pdTRUE) {

      // ===== COALESCE: gom h·∫øt token c√≤n l·∫°i trong h√†ng ƒë·ª£i ƒë·ªÉ publish 1 l·∫ßn =====
      while (uxSemaphoreGetCount(publishSem) > 0) {
        xSemaphoreTake(publishSem, 0);
      }

      // ---- Ch·ª•p snapshot d·ªØ li·ªáu an to√†n d∆∞·ªõi mutex ----
      int s = 0, l = 0, rainRaw = 0;
      float t = NAN, h = NAN;
      bool tank = true, mode = false, raining = false;
      bool pumpOn = false;
      WaterLevel wl;

      if (xSemaphoreTake(dataMutex, pdMS_TO_TICKS(30)) == pdTRUE) {
        s        = soilValue;
        l        = lightValue;
        t        = temp;
        h        = hum;
        tank     = tankHasWater;
        raining  = isRaining;
        rainRaw  = rainRawValue;
        xSemaphoreGive(dataMutex);
      }

      mode = manualMode;
      wl   = waterLevel;
      pumpOn = mode ? pumpManualState : (wl == WATER_ON || pumpActive);

      // T√≠nh % m∆∞a t·ª´ raw (0..4095 -> 0..100). L∆∞u √Ω: n·∫øu module ƒë·∫£o th√¨ ƒë·ªïi 100 - rainPct.
      int rainPct = map(rainRaw, 0, 4095, 0, 100);
      rainPct = constrain(rainPct, 0, 100);

      const char* tankStr = tank ? "ƒê·∫ßy" : "H·∫øt";
      const char* pumpStr = pumpOn ? "B·∫≠t" : "T·∫Øt";
      const char* modeStr = mode ? "Th·ªß c√¥ng" : "T·ª± ƒë·ªông";

      // ===== 1) Chu·ªói ‚Äúƒë·∫πp‚Äù ƒë·ªÉ debug nhanh (emoji) - 1 d√≤ng c√≥ c·∫£ m∆∞a =====
      char pretty[384];
      snprintf(pretty, sizeof(pretty),
        "üå°Nhi·ªát ƒë·ªô: %.1f¬∞C | üíßƒê·ªô ·∫©m: %.1f%% | üå±ƒê·∫•t: %d%% | ‚òÄÔ∏è√Ånh s√°ng: %d%% | üåßM∆∞a: %d%% (%s) | ü™£Th√πng n∆∞·ªõc: %s | B∆°m: %s | Ch·∫ø ƒë·ªô: %s",
        t, h, s, l, rainPct, raining ? "M∆∞a" : "Kh√¥ng m∆∞a",
        tankStr, pumpStr, modeStr
      );

      safePublish(TOPIC_PRETTY, pretty);
      Serial.printf("üì§ MQTT PRETTY: %s\n", pretty);

      // ===== 2) Telemetry JSON g·ªçn, ƒë·∫ßy ƒë·ªß =====
      char tele[512];
      snprintf(tele, sizeof(tele),
        "{"
          "\"temp_c\":%.1f,"
          "\"hum_pct\":%.1f,"
          "\"soil_pct\":%d,"
          "\"light_pct\":%d,"
          "\"rain_raw\":%d,"
          "\"rain_pct\":%d,"
          "\"raining\":%s,"
          "\"tank\":\"%s\","
          "\"mode\":\"%s\","
          "\"pump\":\"%s\""
        "}",
        t, h, s, l,
        rainRaw, rainPct, (raining ? "true" : "false"),
        tank ? "ƒê·∫ßy" : "H·∫øt",
        mode ? "Th·ªß c√¥ng" : "T·ª± ƒë·ªông",
        pumpOn ? "B·∫≠t" : "T·∫Øt"
      );
      safePublish(TOPIC_TELE, tele);
      Serial.printf("üì§ MQTT TELE: %s\n", tele);

      // ===== 3) JSON state t√≥m t·∫Øt =====
      char stateMsg[160];
      snprintf(stateMsg, sizeof(stateMsg),
        "{"
          "\"Ch·∫ø ƒë·ªô\":\"%s\","
          "\"B∆°m\":\"%s\""
        "}",
        mode ? "Th·ªß c√¥ng üñê" : "T·ª± ƒë·ªông ü§ñ",
        pumpOn ? "B·∫¨T üö∞" : "T·∫ÆT ‚õî"
      );
      safePublish(TOPIC_STATE, stateMsg);
    }
  }
}

/* ================== Setup/Loop ================== */
void setup() {
  Serial.begin(115200);
  dht.begin();

  // C·∫•u h√¨nh IO
  pinMode(SOIL_PIN, INPUT);
  pinMode(LDR_PIN, INPUT);
  pinMode(WATER_TANK_PIN, INPUT);
  pinMode(RAIN_PIN, INPUT);      // analog
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(LED_PUMP, OUTPUT);
  setPumpState(false);           // m·∫∑c ƒë·ªãnh t·∫Øt b∆°m

  // N√∫t nh·∫•n d√πng PULLUP (nh·∫£ = HIGH, nh·∫•n = LOW)
  pinMode(BTN_MODE, INPUT_PULLUP);
  pinMode(BTN_MANUAL, INPUT_PULLUP);

  // T·∫°o Mutex & Counting Semaphore
  dataMutex  = xSemaphoreCreateMutex();
  publishSem = xSemaphoreCreateCounting(PUB_SEM_MAX, 0);

  if (!dataMutex || !publishSem) {
    Serial.println("‚ùå Kh·ªüi t·∫°o semaphore/mutex th·∫•t b·∫°i!");
    while (1) vTaskDelay(pdMS_TO_TICKS(1000));
  }

  // K·∫øt n·ªëi WiFi + c·∫•u h√¨nh MQTT
  setup_wifi();
  espClient.setInsecure();                 // d√πng TLS kh√¥ng ki·ªÉm ch·ª©ng (demo)
  client.setServer(mqtt_broker, mqtt_port);
  client.setBufferSize(1024);              // üîß tƒÉng buffer ƒë·ªÉ kh√¥ng tr√†n khi publish JSON d√†i/emoji
  client.setCallback(mqttCallback);

  // T·∫°o c√°c task (pin v√†o core 1 cho ·ªïn ƒë·ªãnh IO)
  xTaskCreatePinnedToCore(readSensorsTask, "ReadSensors", 4096, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(pumpControlTask, "PumpControl", 4096, NULL, 1, NULL, 1);
  xTaskCreatePinnedToCore(buttonTask,      "ButtonTask",  2048, NULL, 2, NULL, 1);
  xTaskCreatePinnedToCore(mqttTask,        "MQTTTask",    6144, NULL, 2, NULL, 1); // tƒÉng stack cho JSON d√†i

  // √âp publish 1 l·∫ßn l√∫c kh·ªüi ƒë·ªông ƒë·ªÉ c√≥ d·ªØ li·ªáu ban ƒë·∫ßu
  xSemaphoreGive(publishSem);
}

void loop() {
  // Kh√¥ng d√πng loop() v√¨ m·ªçi th·ª© ƒë√£ ch·∫°y trong FreeRTOS tasks
}
